"""PEP8规范"""

#一、代码编排
#1.缩进。4个空格的缩进，不使用Tab，更不能混合使用Tab和空格。
#2.每行的最大长度为79，换行可以使用反斜杠（\）,最好使用圆括号，换行点要在操作符的后面敲空格。
#3.类和top-level函数定义之间空两行，类中的方法之间空一行；函数内逻辑无关段落空一行，其他不空行。


#二、文档编排
#1.模块内容的顺序：模块说明和docstring——import——global&contants——其它定义 \
#      import按标准、三方、自己编写的顺序排放，之间空一行。
#2.不要在一个import中多个库，比如 import os,sys
#3.如果采用from XX import XX引用库，可以省略‘module'，都是可能出现命名冲突， \
#       这是要采用import XX 


#三、空格的使用
#====总体原则，避免不必要的空格====
#1.各种右括号前不要加空格
#2.逗号、冒号、分号前不要加空格
#3.函数的左括号前不要加空格，如Func(1)。
#4.序列的左括号前不要加空格，如list[1]。
#5.操作号左右各加一个空格，不要为了对齐增加空格。
#6.函数默认参数使用的赋值左右省略空格。
#7.不要将多语句写在同一行，尽管使用";"允许。
#8.if/or/while语句中，即使执行语句只有一句，也必须另起一行。


#四、注释
#====总体原则，错误的注释不如没有注释，修改代码时，及时修改注释。"#"加一空格。===


#五、命名规范
#====总体原则，新编代码按要求命名，现有库的编码尽量保持风格===
#1.尽量单独使用小写字母’l，大写'O'等容易混淆的字母。
#2.模块命名尽量短小，使用全部小写的方式，可以使用下划线。
#3.包命名尽量短小，使用全部小写的方式，不可以使用下划线。
#4.类的命名使用CapWords的方式，模块内部使用的类采用_Capwords的方式。
#5.异常命名使用CapWords+Error后缀的方式。
#6.全局变量尽量只在模块内有效，类似C语言中的static。实现的方法有两种，一是__all__, \
#      二是前缀一个下划线。
#7.函数的命名使用全部小写的方式，可以使用下划线。
#8.常量的命名使用全部大写的方式，可以使用下划线。
#9.累的属性(方法和变量)命名使用全部小写的方式，可以使用下划线。
#10.类的属性有三种作用域public、non-public和subclass API，前缀一个下划线。
#11.类的属性若与关键字名字冲突，后缀一个下划线，尽量不要使用缩略的方式。
#12.为避免与子类属性命名冲突，在类的一些属性前前缀两条下划线。
#13.类的方式第一个参数必须是self，二静态方法第一个参数必须是cls。

#六、编码建议
#1.编码考虑到其他python实现的效率等问题，比如运算符'+',在CPython中的效率很高，但是在 \
#    JPython中却非常，所以应该采用.join()的方法。
#2.尽可能使用'is' 'is not'代替'=='，if x is not None 要优于if x。
#3.使用基于类的异常，每个模块包都有自己的异常类，继承自Exception。
#4.异常中不要使用裸露的except，except后跟着具体的exceptioon。
#5.异常中的try的代码尽可能少。
#6.使用startwith() and endwith()代替切片进行序列前缀或后缀的检查
#   Yes:  if foo.startswith('bar'):优于
#   No:  if foo[:3] == 'bar':
#7.使用isinstance()比较对象类型。
#   Yes:  if isinstance(obj, int): 优于
#   No:  if type(obj) is type(1):
#8.判断序列空或不空，
#   Yes:  if not seq:
#   No:  if len(seq)
#9.字符串不要以空格收尾。
#10.二进制数据判断使用if boolvalue的方式。


